{"version":3,"sources":["components/SearchBox/SearchBox.js","components/Camera/Camera.js","components/Cameras/Cameras.js","components/FilteredCameras/FilteredCameras.js","App.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Camera","props","alt","src","work","id","exif","model","make","GET_WORKS","gql","Cameras","query","loading","data","works","map","currentCamera","FilteredCameras","httpLink","createHttpLink","uri","cache","InMemoryCache","client","ApolloClient","link","App","e","setState","searchField","target","value","state","card","bind","then","res","this","filteredWork","filter","item","toLowerCase","includes","toLocaleLowerCase","React","Component","ReactDOM","render","document","getElementById"],"mappings":"yWAgBeA,EAZG,SAAC,GAAD,IAChBC,EADgB,EAChBA,YACAC,EAFgB,EAEhBA,aAFgB,OAIlB,uBACEC,UAAU,SACVC,KAAK,SACLH,YAAaA,EACbI,SAAUH,KCIGI,G,MAbA,SAACC,GAAD,OACb,qBAAKJ,UAAU,mBAAf,SACE,gCACE,qBACEK,IAAI,SACJC,IAAG,wCAAmCF,EAAMG,KAAKC,GAA9C,+BAEP,0CAAcJ,EAAMG,KAAKE,KAAKC,MAAhB,UAA2BN,EAAMG,KAAKE,KAAKC,OAAU,mBACnE,yCAAaN,EAAMG,KAAKE,KAAKE,KAAhB,UAA0BP,EAAMG,KAAKE,KAAKE,MAAS,oBANtDP,EAAMG,KAAKC,Q,QCAnBI,EAAYC,YAAH,2LA8BAC,EAbC,kBACd,cAAC,IAAD,CAAOC,MAAOH,EAAd,SAEI,YAAuB,IAApBI,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,KACV,OAAGD,EAAgB,2CACZC,EAAKC,MAAMC,KAAI,SAACC,GAAD,OACpB,cAAC,EAAD,CAAQb,KAAMa,WCjBTC,EARS,SAACjB,GAAD,OACtB,8BACGA,EAAMG,KAAKY,KAAI,SAAAC,GAAa,OAC3B,cAAC,EAAD,CAA+Bb,KAAMa,GAAxBA,EAAcZ,UCK3Bc,G,MAAWC,YAAe,CAC9BC,IAAK,oDAGDC,EAAQ,IAAIC,IAEZC,EAAS,IAAIC,IAAa,CAC9BC,KAAMP,EACNG,UA6DaK,E,kDAzDb,aAAe,IAAD,8BACZ,gBAiCF/B,aAAe,SAACgC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhCtC,EAAKC,MAAQ,CACXC,KAAK,GACLJ,YAAa,IAEf,EAAKlC,aAAe,EAAKA,aAAauC,KAAlB,gBAPR,E,qDAUd,WAAqB,IAAD,OAClBX,EAAOZ,MAAM,CACXA,MAAOF,YAAF,2PAiBN0B,MAAK,SAAAC,GACJ,EAAKR,SAAS,CAAEK,KAAMG,EAAIvB,KAAKC,a,oBAQnC,WAAW,IAAD,EACqBuB,KAAKL,MAA1BC,EADA,EACAA,KAAMJ,EADN,EACMA,YACRS,EAAeL,EAAKM,QAAO,SAAAC,GAAI,OACnCA,EAAKnC,KAAKC,MAAMmC,cAAcC,SAASb,EAAYc,sBAChDH,EAAKnC,KAAKE,KAAKkC,cAAcC,SAASb,EAAYc,wBAGvD,OACE,eAAC,IAAD,CAAgBpB,OAAQA,EAAxB,UACA,oBAAI3B,UAAU,KAAd,mCACA,cAAC,EAAD,CAAWF,YAAY,0BAA0BC,aAAc0C,KAAK1C,eACpE,qBAAKC,UAAU,MAAf,SACGiC,EAAc,cAAC,EAAD,CAAiB1B,KAAMmC,IAAmB,cAAC,EAAD,a,GAnD/CM,IAAMC,WCjBxBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.20054824.chunk.js","sourcesContent":["import React from 'react';\n\nimport './SearchBox.css';\n\nconst SearchBox = ({\n  placeholder,\n  handleChange,\n}) => (\n<input \n  className='search'\n  type='search' \n  placeholder={placeholder} \n  onChange={handleChange}\n  />\n);\n\nexport default SearchBox;\n","import React from 'react';\nimport './Camera.css';\n\nconst Camera = (props) => (\n  <div className='camera-container'>\n    <div key={props.work.id}>\n      <img\n        alt=\"camera\"\n        src={`http://ih1.redbubble.net/work.${props.work.id}.1.flat,135x135,075,f.jpg`}\n      />\n    <div>MODEL: { props.work.exif.model ? `${props.work.exif.model}` : 'Unknown Model' }</div>\n    <div>MAKE: { props.work.exif.make ? `${props.work.exif.make}` : 'Unknown Make' }</div>\n  </div>\n  </div>\n);\n\nexport default Camera;","import React from 'react';\nimport Camera from '../Camera/Camera';\nimport { Query } from 'react-apollo';\nimport { gql } from 'apollo-boost';\n\nconst GET_WORKS = gql`\n  {\n    works {\n      id\n      filename\n      exif {\n        model\n        make\n      }\n      urls {\n        type\n        link\n      }\n    }\n  }\n`;\n\nconst Cameras = () => (\n  <Query query={GET_WORKS}>\n    {\n      ({ loading, data}) => {\n        if(loading) return <p>loading...</p>;\n        return data.works.map((currentCamera) => (\n          <Camera work={currentCamera} />\n        ));\n      }\n    }\n  </Query>\n);\n\nexport default Cameras;\n\n","import React from 'react';\nimport Camera from '../Camera/Camera';\n\nconst FilteredCameras = (props) => (\n  <div>\n    {props.work.map(currentCamera => (\n      <Camera key={currentCamera.id} work={currentCamera} />\n    ))}\n  </div>\n);\n\nexport default FilteredCameras;\n","import React from 'react';\nimport { ApolloProvider } from 'react-apollo';\nimport { createHttpLink } from 'apollo-link-http'; \nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloClient, gql } from 'apollo-boost';\nimport SearchBox from './components/SearchBox/SearchBox';\nimport Cameras from './components/Cameras/Cameras';\nimport FilteredCameras from './components/FilteredCameras/FilteredCameras';\n\nimport './App.css';\n\nconst httpLink = createHttpLink({\n  uri: 'https://take-home-test-gql.herokuapp.com/query'\n});\n\nconst cache = new InMemoryCache();\n\nconst client = new ApolloClient({\n  link: httpLink,\n  cache\n}) \n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      card:[],\n      searchField: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    client.query({\n      query: gql`\n      {\n        works {\n          id\n          filename\n          exif {\n            model\n            make\n          }\n          urls {\n            type\n            link\n          }\n        }\n      }\n      `\n    })\n    .then(res => {\n      this.setState({ card: res.data.works })\n    })\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render () {\n    const { card, searchField } =this.state;\n    const filteredWork = card.filter(item => \n      item.exif.model.toLowerCase().includes(searchField.toLocaleLowerCase())\n      || item.exif.make.toLowerCase().includes(searchField.toLocaleLowerCase())\n    );\n  \n    return (\n      <ApolloProvider client={client}>\n      <h1 className='h1'>Camera Model and Make</h1>\n      <SearchBox placeholder='Type the model and make' handleChange={this.handleChange} />\n      <div className=\"App\">\n        {searchField ? <FilteredCameras work={filteredWork} /> : <Cameras /> }\n      </div>\n    </ApolloProvider>\n    )\n  }\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));"],"sourceRoot":""}