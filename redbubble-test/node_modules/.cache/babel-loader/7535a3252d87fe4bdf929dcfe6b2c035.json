{"ast":null,"code":"\"use strict\";\n/**\n *  Copyright (c) Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n/**\n * Provided previous \"queryFacts\", a GraphQL schema, and a query document\n * string, return a set of facts about that query useful for GraphiQL features.\n *\n * If the query cannot be parsed, returns undefined.\n */\n\n\nfunction getQueryFacts(schema, documentAST) {\n  var variableToType = schema ? collectVariables(schema, documentAST) : null; // Collect operations by their names.\n\n  var operations = [];\n  documentAST.definitions.forEach(function (def) {\n    if (def.kind === 'OperationDefinition') {\n      operations.push(def);\n    }\n  });\n  return {\n    variableToType: variableToType,\n    operations: operations\n  };\n}\n\nexports.getQueryFacts = getQueryFacts;\n/**\n * Provided a schema and a document, produces a `variableToType` Object.\n */\n\nfunction collectVariables(schema, documentAST) {\n  var variableToType = Object.create(null);\n  documentAST.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      var variableDefinitions = definition.variableDefinitions;\n\n      if (variableDefinitions) {\n        variableDefinitions.forEach(function (_a) {\n          var variable = _a.variable,\n              type = _a.type;\n          var inputType = graphql_1.typeFromAST(schema, type);\n\n          if (inputType) {\n            variableToType[variable.name.value] = inputType;\n          }\n        });\n      }\n    }\n  });\n  return variableToType;\n}\n\nexports.collectVariables = collectVariables; // function getDeepType(type) {\n//   if (type.type) {\n//     return getDeepType(type.type)\n//   }\n//   return type\n// }","map":{"version":3,"sources":["/Users/wubo/Desktop/card-design/card-design/node_modules/graphql-playground-react/lib/components/Playground/util/getQueryFacts.js"],"names":["Object","defineProperty","exports","value","graphql_1","require","getQueryFacts","schema","documentAST","variableToType","collectVariables","operations","definitions","forEach","def","kind","push","create","definition","variableDefinitions","_a","variable","type","inputType","typeFromAST","name"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;;AAIA,IAAIC,SAAS,GAAGC,OAAO,CAAC,SAAD,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,aAAT,CAAuBC,MAAvB,EAA+BC,WAA/B,EAA4C;AAC1C,MAAIC,cAAc,GAAGF,MAAM,GAAGG,gBAAgB,CAACH,MAAD,EAASC,WAAT,CAAnB,GAA2C,IAAtE,CAD0C,CACkC;;AAE5E,MAAIG,UAAU,GAAG,EAAjB;AACAH,EAAAA,WAAW,CAACI,WAAZ,CAAwBC,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAC7C,QAAIA,GAAG,CAACC,IAAJ,KAAa,qBAAjB,EAAwC;AACtCJ,MAAAA,UAAU,CAACK,IAAX,CAAgBF,GAAhB;AACD;AACF,GAJD;AAKA,SAAO;AACLL,IAAAA,cAAc,EAAEA,cADX;AAELE,IAAAA,UAAU,EAAEA;AAFP,GAAP;AAID;;AAEDT,OAAO,CAACI,aAAR,GAAwBA,aAAxB;AACA;AACA;AACA;;AAEA,SAASI,gBAAT,CAA0BH,MAA1B,EAAkCC,WAAlC,EAA+C;AAC7C,MAAIC,cAAc,GAAGT,MAAM,CAACiB,MAAP,CAAc,IAAd,CAArB;AACAT,EAAAA,WAAW,CAACI,WAAZ,CAAwBC,OAAxB,CAAgC,UAAUK,UAAV,EAAsB;AACpD,QAAIA,UAAU,CAACH,IAAX,KAAoB,qBAAxB,EAA+C;AAC7C,UAAII,mBAAmB,GAAGD,UAAU,CAACC,mBAArC;;AAEA,UAAIA,mBAAJ,EAAyB;AACvBA,QAAAA,mBAAmB,CAACN,OAApB,CAA4B,UAAUO,EAAV,EAAc;AACxC,cAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAlB;AAAA,cACIC,IAAI,GAAGF,EAAE,CAACE,IADd;AAEA,cAAIC,SAAS,GAAGnB,SAAS,CAACoB,WAAV,CAAsBjB,MAAtB,EAA8Be,IAA9B,CAAhB;;AAEA,cAAIC,SAAJ,EAAe;AACbd,YAAAA,cAAc,CAACY,QAAQ,CAACI,IAAT,CAActB,KAAf,CAAd,GAAsCoB,SAAtC;AACD;AACF,SARD;AASD;AACF;AACF,GAhBD;AAiBA,SAAOd,cAAP;AACD;;AAEDP,OAAO,CAACQ,gBAAR,GAA2BA,gBAA3B,C,CAA6C;AAC7C;AACA;AACA;AACA;AACA","sourcesContent":["\"use strict\";\n/**\n *  Copyright (c) Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n/**\n * Provided previous \"queryFacts\", a GraphQL schema, and a query document\n * string, return a set of facts about that query useful for GraphiQL features.\n *\n * If the query cannot be parsed, returns undefined.\n */\n\n\nfunction getQueryFacts(schema, documentAST) {\n  var variableToType = schema ? collectVariables(schema, documentAST) : null; // Collect operations by their names.\n\n  var operations = [];\n  documentAST.definitions.forEach(function (def) {\n    if (def.kind === 'OperationDefinition') {\n      operations.push(def);\n    }\n  });\n  return {\n    variableToType: variableToType,\n    operations: operations\n  };\n}\n\nexports.getQueryFacts = getQueryFacts;\n/**\n * Provided a schema and a document, produces a `variableToType` Object.\n */\n\nfunction collectVariables(schema, documentAST) {\n  var variableToType = Object.create(null);\n  documentAST.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      var variableDefinitions = definition.variableDefinitions;\n\n      if (variableDefinitions) {\n        variableDefinitions.forEach(function (_a) {\n          var variable = _a.variable,\n              type = _a.type;\n          var inputType = graphql_1.typeFromAST(schema, type);\n\n          if (inputType) {\n            variableToType[variable.name.value] = inputType;\n          }\n        });\n      }\n    }\n  });\n  return variableToType;\n}\n\nexports.collectVariables = collectVariables; // function getDeepType(type) {\n//   if (type.type) {\n//     return getDeepType(type.type)\n//   }\n//   return type\n// }"]},"metadata":{},"sourceType":"script"}