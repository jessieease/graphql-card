{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fillLeafs = fillLeafs;\n\nvar _graphql = require(\"graphql\");\n/**\n *  Copyright (c) 2019 GraphQL Contributors.\n *\n *  This source code is licensed under the MIT license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Given a document string which may not be valid due to terminal fields not\n * representing leaf values (Spec Section: \"Leaf Field Selections\"), and a\n * function which provides reasonable default field names for a given type,\n * this function will attempt to produce a schema which is valid after filling\n * in selection sets for the invalid fields.\n *\n * Note that there is no guarantee that the result will be a valid query, this\n * utility represents a \"best effort\" which may be useful within IDE tools.\n */\n\n\nfunction fillLeafs(schema, docString, getDefaultFieldNames) {\n  const insertions = [];\n\n  if (!schema) {\n    return {\n      insertions,\n      result: docString\n    };\n  }\n\n  let ast;\n\n  try {\n    ast = (0, _graphql.parse)(docString);\n  } catch (error) {\n    return {\n      insertions,\n      result: docString\n    };\n  }\n\n  const fieldNameFn = getDefaultFieldNames || defaultGetDefaultFieldNames;\n  const typeInfo = new _graphql.TypeInfo(schema);\n  (0, _graphql.visit)(ast, {\n    leave(node) {\n      typeInfo.leave(node);\n    },\n\n    enter(node) {\n      typeInfo.enter(node);\n\n      if (node.kind === 'Field' && !node.selectionSet) {\n        const fieldType = typeInfo.getType();\n        const selectionSet = buildSelectionSet(fieldType, fieldNameFn);\n\n        if (selectionSet) {\n          const indent = getIndentation(docString, node.loc.start);\n          insertions.push({\n            index: node.loc.end,\n            string: ' ' + (0, _graphql.print)(selectionSet).replace(/\\n/g, '\\n' + indent)\n          });\n        }\n      }\n    }\n\n  }); // Apply the insertions, but also return the insertions metadata.\n\n  return {\n    insertions,\n    result: withInsertions(docString, insertions)\n  };\n} // The default function to use for producing the default fields from a type.\n// This function first looks for some common patterns, and falls back to\n// including all leaf-type fields.\n\n\nfunction defaultGetDefaultFieldNames(type) {\n  // If this type cannot access fields, then return an empty set.\n  if (!type.getFields) {\n    return [];\n  }\n\n  const fields = type.getFields(); // Is there an `id` field?\n\n  if (fields['id']) {\n    return ['id'];\n  } // Is there an `edges` field?\n\n\n  if (fields['edges']) {\n    return ['edges'];\n  } // Is there an `node` field?\n\n\n  if (fields['node']) {\n    return ['node'];\n  } // Include all leaf-type fields.\n\n\n  const leafFieldNames = [];\n  Object.keys(fields).forEach(fieldName => {\n    if ((0, _graphql.isLeafType)(fields[fieldName].type)) {\n      leafFieldNames.push(fieldName);\n    }\n  });\n  return leafFieldNames;\n} // Given a GraphQL type, and a function which produces field names, recursively\n// generate a SelectionSet which includes default fields.\n\n\nfunction buildSelectionSet(type, getDefaultFieldNames) {\n  // Unwrap any non-null or list types.\n  const namedType = (0, _graphql.getNamedType)(type); // Unknown types and leaf types do not have selection sets.\n\n  if (!type || (0, _graphql.isLeafType)(type)) {\n    return;\n  } // Get an array of field names to use.\n\n\n  const fieldNames = getDefaultFieldNames(namedType); // If there are no field names to use, return no selection set.\n\n  if (!Array.isArray(fieldNames) || fieldNames.length === 0) {\n    return;\n  } // Build a selection set of each field, calling buildSelectionSet recursively.\n\n\n  return {\n    kind: 'SelectionSet',\n    selections: fieldNames.map(fieldName => {\n      const fieldDef = namedType.getFields()[fieldName];\n      const fieldType = fieldDef ? fieldDef.type : null;\n      return {\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: fieldName\n        },\n        selectionSet: buildSelectionSet(fieldType, getDefaultFieldNames)\n      };\n    })\n  };\n} // Given an initial string, and a list of \"insertion\" { index, string } objects,\n// return a new string with these insertions applied.\n\n\nfunction withInsertions(initial, insertions) {\n  if (insertions.length === 0) {\n    return initial;\n  }\n\n  let edited = '';\n  let prevIndex = 0;\n  insertions.forEach(_ref => {\n    let {\n      index,\n      string\n    } = _ref;\n    edited += initial.slice(prevIndex, index) + string;\n    prevIndex = index;\n  });\n  edited += initial.slice(prevIndex);\n  return edited;\n} // Given a string and an index, look backwards to find the string of whitespace\n// following the next previous line break.\n\n\nfunction getIndentation(str, index) {\n  let indentStart = index;\n  let indentEnd = index;\n\n  while (indentStart) {\n    const c = str.charCodeAt(indentStart - 1); // line break\n\n    if (c === 10 || c === 13 || c === 0x2028 || c === 0x2029) {\n      break;\n    }\n\n    indentStart--; // not white space\n\n    if (c !== 9 && c !== 11 && c !== 12 && c !== 32 && c !== 160) {\n      indentEnd = indentStart;\n    }\n  }\n\n  return str.substring(indentStart, indentEnd);\n}","map":{"version":3,"sources":["/Users/wubo/Desktop/card-design/card-design/node_modules/graphql-playground-react/node_modules/graphiql/dist/utility/fillLeafs.js"],"names":["Object","defineProperty","exports","value","fillLeafs","_graphql","require","schema","docString","getDefaultFieldNames","insertions","result","ast","parse","error","fieldNameFn","defaultGetDefaultFieldNames","typeInfo","TypeInfo","visit","leave","node","enter","kind","selectionSet","fieldType","getType","buildSelectionSet","indent","getIndentation","loc","start","push","index","end","string","print","replace","withInsertions","type","getFields","fields","leafFieldNames","keys","forEach","fieldName","isLeafType","namedType","getNamedType","fieldNames","Array","isArray","length","selections","map","fieldDef","name","initial","edited","prevIndex","slice","str","indentStart","indentEnd","c","charCodeAt","substring"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,SAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASF,SAAT,CAAmBG,MAAnB,EAA2BC,SAA3B,EAAsCC,oBAAtC,EAA4D;AAC1D,QAAMC,UAAU,GAAG,EAAnB;;AAEA,MAAI,CAACH,MAAL,EAAa;AACX,WAAO;AACLG,MAAAA,UADK;AAELC,MAAAA,MAAM,EAAEH;AAFH,KAAP;AAID;;AAED,MAAII,GAAJ;;AAEA,MAAI;AACFA,IAAAA,GAAG,GAAG,CAAC,GAAGP,QAAQ,CAACQ,KAAb,EAAoBL,SAApB,CAAN;AACD,GAFD,CAEE,OAAOM,KAAP,EAAc;AACd,WAAO;AACLJ,MAAAA,UADK;AAELC,MAAAA,MAAM,EAAEH;AAFH,KAAP;AAID;;AAED,QAAMO,WAAW,GAAGN,oBAAoB,IAAIO,2BAA5C;AACA,QAAMC,QAAQ,GAAG,IAAIZ,QAAQ,CAACa,QAAb,CAAsBX,MAAtB,CAAjB;AACA,GAAC,GAAGF,QAAQ,CAACc,KAAb,EAAoBP,GAApB,EAAyB;AACvBQ,IAAAA,KAAK,CAACC,IAAD,EAAO;AACVJ,MAAAA,QAAQ,CAACG,KAAT,CAAeC,IAAf;AACD,KAHsB;;AAKvBC,IAAAA,KAAK,CAACD,IAAD,EAAO;AACVJ,MAAAA,QAAQ,CAACK,KAAT,CAAeD,IAAf;;AAEA,UAAIA,IAAI,CAACE,IAAL,KAAc,OAAd,IAAyB,CAACF,IAAI,CAACG,YAAnC,EAAiD;AAC/C,cAAMC,SAAS,GAAGR,QAAQ,CAACS,OAAT,EAAlB;AACA,cAAMF,YAAY,GAAGG,iBAAiB,CAACF,SAAD,EAAYV,WAAZ,CAAtC;;AAEA,YAAIS,YAAJ,EAAkB;AAChB,gBAAMI,MAAM,GAAGC,cAAc,CAACrB,SAAD,EAAYa,IAAI,CAACS,GAAL,CAASC,KAArB,CAA7B;AACArB,UAAAA,UAAU,CAACsB,IAAX,CAAgB;AACdC,YAAAA,KAAK,EAAEZ,IAAI,CAACS,GAAL,CAASI,GADF;AAEdC,YAAAA,MAAM,EAAE,MAAM,CAAC,GAAG9B,QAAQ,CAAC+B,KAAb,EAAoBZ,YAApB,EAAkCa,OAAlC,CAA0C,KAA1C,EAAiD,OAAOT,MAAxD;AAFA,WAAhB;AAID;AACF;AACF;;AApBsB,GAAzB,EAvB0D,CA6CtD;;AAEJ,SAAO;AACLlB,IAAAA,UADK;AAELC,IAAAA,MAAM,EAAE2B,cAAc,CAAC9B,SAAD,EAAYE,UAAZ;AAFjB,GAAP;AAID,C,CAAC;AACF;AACA;;;AAGA,SAASM,2BAAT,CAAqCuB,IAArC,EAA2C;AACzC;AACA,MAAI,CAACA,IAAI,CAACC,SAAV,EAAqB;AACnB,WAAO,EAAP;AACD;;AAED,QAAMC,MAAM,GAAGF,IAAI,CAACC,SAAL,EAAf,CANyC,CAMR;;AAEjC,MAAIC,MAAM,CAAC,IAAD,CAAV,EAAkB;AAChB,WAAO,CAAC,IAAD,CAAP;AACD,GAVwC,CAUvC;;;AAGF,MAAIA,MAAM,CAAC,OAAD,CAAV,EAAqB;AACnB,WAAO,CAAC,OAAD,CAAP;AACD,GAfwC,CAevC;;;AAGF,MAAIA,MAAM,CAAC,MAAD,CAAV,EAAoB;AAClB,WAAO,CAAC,MAAD,CAAP;AACD,GApBwC,CAoBvC;;;AAGF,QAAMC,cAAc,GAAG,EAAvB;AACA1C,EAAAA,MAAM,CAAC2C,IAAP,CAAYF,MAAZ,EAAoBG,OAApB,CAA4BC,SAAS,IAAI;AACvC,QAAI,CAAC,GAAGxC,QAAQ,CAACyC,UAAb,EAAyBL,MAAM,CAACI,SAAD,CAAN,CAAkBN,IAA3C,CAAJ,EAAsD;AACpDG,MAAAA,cAAc,CAACV,IAAf,CAAoBa,SAApB;AACD;AACF,GAJD;AAKA,SAAOH,cAAP;AACD,C,CAAC;AACF;;;AAGA,SAASf,iBAAT,CAA2BY,IAA3B,EAAiC9B,oBAAjC,EAAuD;AACrD;AACA,QAAMsC,SAAS,GAAG,CAAC,GAAG1C,QAAQ,CAAC2C,YAAb,EAA2BT,IAA3B,CAAlB,CAFqD,CAED;;AAEpD,MAAI,CAACA,IAAD,IAAS,CAAC,GAAGlC,QAAQ,CAACyC,UAAb,EAAyBP,IAAzB,CAAb,EAA6C;AAC3C;AACD,GANoD,CAMnD;;;AAGF,QAAMU,UAAU,GAAGxC,oBAAoB,CAACsC,SAAD,CAAvC,CATqD,CASD;;AAEpD,MAAI,CAACG,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAD,IAA8BA,UAAU,CAACG,MAAX,KAAsB,CAAxD,EAA2D;AACzD;AACD,GAboD,CAanD;;;AAGF,SAAO;AACL7B,IAAAA,IAAI,EAAE,cADD;AAEL8B,IAAAA,UAAU,EAAEJ,UAAU,CAACK,GAAX,CAAeT,SAAS,IAAI;AACtC,YAAMU,QAAQ,GAAGR,SAAS,CAACP,SAAV,GAAsBK,SAAtB,CAAjB;AACA,YAAMpB,SAAS,GAAG8B,QAAQ,GAAGA,QAAQ,CAAChB,IAAZ,GAAmB,IAA7C;AACA,aAAO;AACLhB,QAAAA,IAAI,EAAE,OADD;AAELiC,QAAAA,IAAI,EAAE;AACJjC,UAAAA,IAAI,EAAE,MADF;AAEJpB,UAAAA,KAAK,EAAE0C;AAFH,SAFD;AAMLrB,QAAAA,YAAY,EAAEG,iBAAiB,CAACF,SAAD,EAAYhB,oBAAZ;AAN1B,OAAP;AAQD,KAXW;AAFP,GAAP;AAeD,C,CAAC;AACF;;;AAGA,SAAS6B,cAAT,CAAwBmB,OAAxB,EAAiC/C,UAAjC,EAA6C;AAC3C,MAAIA,UAAU,CAAC0C,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,WAAOK,OAAP;AACD;;AAED,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,SAAS,GAAG,CAAhB;AACAjD,EAAAA,UAAU,CAACkC,OAAX,CAAmB,QAGb;AAAA,QAHc;AAClBX,MAAAA,KADkB;AAElBE,MAAAA;AAFkB,KAGd;AACJuB,IAAAA,MAAM,IAAID,OAAO,CAACG,KAAR,CAAcD,SAAd,EAAyB1B,KAAzB,IAAkCE,MAA5C;AACAwB,IAAAA,SAAS,GAAG1B,KAAZ;AACD,GAND;AAOAyB,EAAAA,MAAM,IAAID,OAAO,CAACG,KAAR,CAAcD,SAAd,CAAV;AACA,SAAOD,MAAP;AACD,C,CAAC;AACF;;;AAGA,SAAS7B,cAAT,CAAwBgC,GAAxB,EAA6B5B,KAA7B,EAAoC;AAClC,MAAI6B,WAAW,GAAG7B,KAAlB;AACA,MAAI8B,SAAS,GAAG9B,KAAhB;;AAEA,SAAO6B,WAAP,EAAoB;AAClB,UAAME,CAAC,GAAGH,GAAG,CAACI,UAAJ,CAAeH,WAAW,GAAG,CAA7B,CAAV,CADkB,CACyB;;AAE3C,QAAIE,CAAC,KAAK,EAAN,IAAYA,CAAC,KAAK,EAAlB,IAAwBA,CAAC,KAAK,MAA9B,IAAwCA,CAAC,KAAK,MAAlD,EAA0D;AACxD;AACD;;AAEDF,IAAAA,WAAW,GAPO,CAOH;;AAEf,QAAIE,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAK,EAAjB,IAAuBA,CAAC,KAAK,EAA7B,IAAmCA,CAAC,KAAK,EAAzC,IAA+CA,CAAC,KAAK,GAAzD,EAA8D;AAC5DD,MAAAA,SAAS,GAAGD,WAAZ;AACD;AACF;;AAED,SAAOD,GAAG,CAACK,SAAJ,CAAcJ,WAAd,EAA2BC,SAA3B,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fillLeafs = fillLeafs;\n\nvar _graphql = require(\"graphql\");\n\n/**\n *  Copyright (c) 2019 GraphQL Contributors.\n *\n *  This source code is licensed under the MIT license found in the\n *  LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Given a document string which may not be valid due to terminal fields not\n * representing leaf values (Spec Section: \"Leaf Field Selections\"), and a\n * function which provides reasonable default field names for a given type,\n * this function will attempt to produce a schema which is valid after filling\n * in selection sets for the invalid fields.\n *\n * Note that there is no guarantee that the result will be a valid query, this\n * utility represents a \"best effort\" which may be useful within IDE tools.\n */\nfunction fillLeafs(schema, docString, getDefaultFieldNames) {\n  const insertions = [];\n\n  if (!schema) {\n    return {\n      insertions,\n      result: docString\n    };\n  }\n\n  let ast;\n\n  try {\n    ast = (0, _graphql.parse)(docString);\n  } catch (error) {\n    return {\n      insertions,\n      result: docString\n    };\n  }\n\n  const fieldNameFn = getDefaultFieldNames || defaultGetDefaultFieldNames;\n  const typeInfo = new _graphql.TypeInfo(schema);\n  (0, _graphql.visit)(ast, {\n    leave(node) {\n      typeInfo.leave(node);\n    },\n\n    enter(node) {\n      typeInfo.enter(node);\n\n      if (node.kind === 'Field' && !node.selectionSet) {\n        const fieldType = typeInfo.getType();\n        const selectionSet = buildSelectionSet(fieldType, fieldNameFn);\n\n        if (selectionSet) {\n          const indent = getIndentation(docString, node.loc.start);\n          insertions.push({\n            index: node.loc.end,\n            string: ' ' + (0, _graphql.print)(selectionSet).replace(/\\n/g, '\\n' + indent)\n          });\n        }\n      }\n    }\n\n  }); // Apply the insertions, but also return the insertions metadata.\n\n  return {\n    insertions,\n    result: withInsertions(docString, insertions)\n  };\n} // The default function to use for producing the default fields from a type.\n// This function first looks for some common patterns, and falls back to\n// including all leaf-type fields.\n\n\nfunction defaultGetDefaultFieldNames(type) {\n  // If this type cannot access fields, then return an empty set.\n  if (!type.getFields) {\n    return [];\n  }\n\n  const fields = type.getFields(); // Is there an `id` field?\n\n  if (fields['id']) {\n    return ['id'];\n  } // Is there an `edges` field?\n\n\n  if (fields['edges']) {\n    return ['edges'];\n  } // Is there an `node` field?\n\n\n  if (fields['node']) {\n    return ['node'];\n  } // Include all leaf-type fields.\n\n\n  const leafFieldNames = [];\n  Object.keys(fields).forEach(fieldName => {\n    if ((0, _graphql.isLeafType)(fields[fieldName].type)) {\n      leafFieldNames.push(fieldName);\n    }\n  });\n  return leafFieldNames;\n} // Given a GraphQL type, and a function which produces field names, recursively\n// generate a SelectionSet which includes default fields.\n\n\nfunction buildSelectionSet(type, getDefaultFieldNames) {\n  // Unwrap any non-null or list types.\n  const namedType = (0, _graphql.getNamedType)(type); // Unknown types and leaf types do not have selection sets.\n\n  if (!type || (0, _graphql.isLeafType)(type)) {\n    return;\n  } // Get an array of field names to use.\n\n\n  const fieldNames = getDefaultFieldNames(namedType); // If there are no field names to use, return no selection set.\n\n  if (!Array.isArray(fieldNames) || fieldNames.length === 0) {\n    return;\n  } // Build a selection set of each field, calling buildSelectionSet recursively.\n\n\n  return {\n    kind: 'SelectionSet',\n    selections: fieldNames.map(fieldName => {\n      const fieldDef = namedType.getFields()[fieldName];\n      const fieldType = fieldDef ? fieldDef.type : null;\n      return {\n        kind: 'Field',\n        name: {\n          kind: 'Name',\n          value: fieldName\n        },\n        selectionSet: buildSelectionSet(fieldType, getDefaultFieldNames)\n      };\n    })\n  };\n} // Given an initial string, and a list of \"insertion\" { index, string } objects,\n// return a new string with these insertions applied.\n\n\nfunction withInsertions(initial, insertions) {\n  if (insertions.length === 0) {\n    return initial;\n  }\n\n  let edited = '';\n  let prevIndex = 0;\n  insertions.forEach(({\n    index,\n    string\n  }) => {\n    edited += initial.slice(prevIndex, index) + string;\n    prevIndex = index;\n  });\n  edited += initial.slice(prevIndex);\n  return edited;\n} // Given a string and an index, look backwards to find the string of whitespace\n// following the next previous line break.\n\n\nfunction getIndentation(str, index) {\n  let indentStart = index;\n  let indentEnd = index;\n\n  while (indentStart) {\n    const c = str.charCodeAt(indentStart - 1); // line break\n\n    if (c === 10 || c === 13 || c === 0x2028 || c === 0x2029) {\n      break;\n    }\n\n    indentStart--; // not white space\n\n    if (c !== 9 && c !== 11 && c !== 12 && c !== 32 && c !== 160) {\n      indentEnd = indentStart;\n    }\n  }\n\n  return str.substring(indentStart, indentEnd);\n}"]},"metadata":{},"sourceType":"script"}