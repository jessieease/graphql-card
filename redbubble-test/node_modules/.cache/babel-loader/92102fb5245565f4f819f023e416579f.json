{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/wubo/Desktop/graphql-card 2/redbubble-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React from'react';import Camera from'../Camera/Camera';import{Query}from'react-apollo';import{gql}from'apollo-boost';import{jsx as _jsx}from\"react/jsx-runtime\";var GET_WORKS=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  {\\n    works {\\n      id\\n      filename\\n      exif {\\n        model\\n        make\\n      }\\n      urls {\\n        type\\n        link\\n      }\\n    }\\n  }\\n\"])));var Cameras=function Cameras(){return/*#__PURE__*/_jsx(Query,{query:GET_WORKS,children:function children(_ref){var loading=_ref.loading,data=_ref.data;if(loading)return/*#__PURE__*/_jsx(\"p\",{children:\"loading...\"});return data.works.map(function(currentCamera){return/*#__PURE__*/_jsx(Camera,{work:currentCamera});});}});};export default Cameras;","map":{"version":3,"sources":["/Users/wubo/Desktop/graphql-card 2/redbubble-test/src/components/Cameras/Cameras.js"],"names":["React","Camera","Query","gql","GET_WORKS","Cameras","loading","data","works","map","currentCamera"],"mappings":"4MAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,kBAAnB,CACA,OAASC,KAAT,KAAsB,cAAtB,CACA,OAASC,GAAT,KAAoB,cAApB,C,2CAEA,GAAMC,CAAAA,SAAS,CAAGD,GAAH,kOAAf,CAiBA,GAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,sBACd,KAAC,KAAD,EAAO,KAAK,CAAED,SAAd,UAEI,uBAAsB,IAAnBE,CAAAA,OAAmB,MAAnBA,OAAmB,CAAVC,IAAU,MAAVA,IAAU,CACpB,GAAGD,OAAH,CAAY,mBAAO,iCAAP,CACZ,MAAOC,CAAAA,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAe,SAACC,aAAD,qBACpB,KAAC,MAAD,EAAQ,IAAI,CAAEA,aAAd,EADoB,EAAf,CAAP,CAGD,CAPL,EADc,EAAhB,CAaA,cAAeL,CAAAA,OAAf","sourcesContent":["import React from 'react';\nimport Camera from '../Camera/Camera';\nimport { Query } from 'react-apollo';\nimport { gql } from 'apollo-boost';\n\nconst GET_WORKS = gql`\n  {\n    works {\n      id\n      filename\n      exif {\n        model\n        make\n      }\n      urls {\n        type\n        link\n      }\n    }\n  }\n`;\n\nconst Cameras = () => (\n  <Query query={GET_WORKS}>\n    {\n      ({ loading, data}) => {\n        if(loading) return <p>loading...</p>;\n        return data.works.map((currentCamera) => (\n          <Camera work={currentCamera} />\n        ));\n      }\n    }\n  </Query>\n);\n\nexport default Cameras;\n\n"]},"metadata":{},"sourceType":"module"}